#!/usr/bin/env node

// 
// fileserver
// Command line script
// 

//// Configuration
var optionsFile,
    options,
    path = require('path'),
    optimist = require('optimist');

var options = optimist.usage(
      'Usage: fileserver [command]',
      {
        'port': {
          description: 'Port.',
          default: 3000
        },
        'host': {
          description: 'Host.',
          default: null
        },
        'reverse-proxy-url': {
          description: 'The URL of the server to fallback to.',
          default: null
        },
        'prefix': {
          description: '.',
          default: ''
        },
        'folder': {
          description: '.',
          default: '.'
        }
      }
    ).argv;

// Show help
if(options.help || options.h) {
  optimist.showHelp();
  return;
}

// Read options from disk
var optionPaths = [];
if(options._[0] != null) optionPaths.push(options._[0]);
optionPaths.push(path.resolve(process.cwd(), 'fileserver-options.js'));
optionPaths.forEach(function(p) {
  try {
    var conf = require(p);
    Object.keys(conf).forEach(function(key) {
      optimist.default(key, conf[key]);
    });
    console.log('Options loaded from %s', p);
  } catch(ex) {}
});

// Set folders
options.folders = options.folders || [];
if(options.folder) {
  options.folders.push({folder: options.folder, prefix: options.prefix});
}

// Set files
options.files = options.files || [];

// Set rev-proxy
options.reverseProxy = [];
if(options['reverse-proxy-url']) {
  options.reverseProxy.push({proxy: options['reverse-proxy-url']});
}

// Set callback
options.callback = options.callback || function(err, server){
  if(err) {
    console.error(err.stack || err);
    console.log('\nExiting...');
    process.exit(1);
    return;
  }
  
  var address = server.server.address();
  var url = 'http://'+address.address+':'+address.port+'';
  
  console.log('');
  
  console.log('Server @ ' + url);
  
  console.log('    reverseProxy:');
  Object.keys(options.reverseProxy).forEach(function(key) {
    console.log('        '+options.reverseProxy[key].proxy);
  });
  
  console.log('    folders:');
  Object.keys(options.folders).forEach(function(key) {
    console.log('        ' + url + options.folders[key].prefix + ' -> ' + options.folders[key].folder);
  });
};

// Set request-callback
options.onRequest = options.onRequest || function(req, res) {
  res.writeHead(404);
  res.write('Not found');
  res.end();
};

// Set server-create-callback
options.onServerCreate = options.onServerCreate || function(server) {
//  console.log('onServerCreate');
};

//console.log(options);

//// Launch server
var server = require('../lib/server').createServer(options, options.onRequest),
    pathmap = server.pathmap;

options.onServerCreate(server.server);

// Read
pathmap.scanFolders(options.folders, function(err, p) {
  if(err) {
    return options.callback(err);
  }
  
  pathmap.addFiles(options.files);
  
  server.server.once('error', function(err) {
    server.server.removeListener('listening', options.callback);
    options.callback(err);
  });
  
  server.server.once('listening', function() {
    server.server.removeListener('error', options.callback);
    options.callback(null, server);
  });
  
  if(options.port != null && options.host != null) {
    server.listen(options.port, options.host);
  } else if(options.port != null) {
    server.listen(options.port);
  } else {
    server.listen();
  }
});
